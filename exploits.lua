-- our menu elements :D
local exploit_choice = ui.new_combobox("AA", "Anti-aimbot angles", "Exploit choice", {"Default", "Roll aa", "Fake flick"})
local fake_flick = ui.new_hotkey("AA", "Anti-aimbot angles", "Fake Flick (use only with default aa preset)")
local fake_flick_invert = ui.new_hotkey("AA", "Anti-aimbot angles", "Inverter")

-- all aa refs
local yawbody, yaw = ui.reference("AA", "Anti-aimbot angles", "Yaw")
local bodyyaw, bodyyaw2 = ui.reference("AA", "Anti-aimbot angles", "Body yaw")
local freeyaw = ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw")
local edge = ui.reference("AA", "Anti-aimbot angles", "Edge yaw")
local jyaw, jyawslide = ui.reference("AA", "Anti-aimbot angles", "Yaw jitter")
local pitch = ui.reference("AA", "Anti-aimbot angles", "Pitch")
local yawbase = ui.reference("AA", "Anti-aimbot angles", "Yaw base")
local freestanding, freestanding2 = ui.reference("AA", "Anti-aimbot angles", "Freestanding")
local fyawlimit = ui.reference("AA", "Anti-aimbot angles", "Fake yaw limit")
local freestand_byaw = ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw")
local slow_walk, slow_walk2 = ui.reference("AA", "Other", "Slow motion")
local fl_limit = ui.reference("AA","Fake lag","Limit")
local yaw, yaw_val = ui.reference("AA","Anti-aimbot angles","Yaw")
local byaw, byaw_val = ui.reference("AA","Anti-aimbot angles","Body yaw")

-- this is here for debugging or indicators whatever you want idgaf
local state = "NONE"



----roll aa

local bit_band = bit.band
local entity_get_local_player, entity_is_alive, entity_get_prop, entity_get_player_weapon =
    entity.get_local_player,
    entity.is_alive,
    entity.get_prop,
    entity.get_player_weapon

-- Libraries
local ffi = require "ffi"
local vector = require("vector")
local ui_set = ui.set
local globals_tickcount, globals_realtime = globals.tickcount, globals.realtime
local entity_get_local_player, entity_is_alive, entity_get_prop, entity_get_player_weapon =
    entity.get_local_player,
    entity.is_alive,
    entity.get_prop,
    entity.get_player_weapon
local math_cos, math_sin, math_rad, math_sqrt = math.cos, math.sin, math.rad, math.sqrt
local function contains(tbl, val)
    for i = 1, #tbl do
        if tbl[i] == val then
            return true
        end
    end
    return false
end
ui_reference = ui.reference
local angle_t = ffi.typeof("struct { float pitch; float yaw; float roll; }")
local vector3_t = ffi.typeof("struct { float x; float y; float z; }")

local usercmd_t =
    ffi.typeof(
    [[
    struct
    {
        uintptr_t vfptr;
        int command_number;
        int tick_count;
        $ viewangles;
        $ aimdirection;
        float forwardmove;
        float sidemove;
        float upmove;
        int buttons;
        uint8_t impulse;
        int weaponselect;
        int weaponsubtype;
        int random_seed;
        short mousedx;
        short mousedy;
        bool hasbeenpredicted;
        $ headangles;
        $ headoffset;
    }
    ]],
    angle_t,
    vector3_t,
    angle_t,
    vector3_t
)

local get_user_cmd_t = ffi.typeof("$* (__thiscall*)(uintptr_t ecx, int nSlot, int sequence_number)", usercmd_t)

local input_vtbl_t =
    ffi.typeof(
    [[
    struct
    {
        uintptr_t padding[8];
        $ GetUserCmd;
    }
    ]],
    get_user_cmd_t
)

local input_t = ffi.typeof([[
    struct
    {
        $* vfptr;
    }*
    ]], input_vtbl_t)

-- ugly casting LMAO
local g_pInput =
    ffi.cast(
    input_t,
    ffi.cast(
        "uintptr_t**",
        tonumber(
            ffi.cast(
                "uintptr_t",
                client.find_signature("client.dll", "\xB9\xCC\xCC\xCC\xCC\x8B\x40\x38\xFF\xD0\x84\xC0\x0F\x85") or
                    error("client.dll!:input not found.")
            )
        ) + 1
    )[0]
)

local lua_log = function(...) --inspired by sapphyrus' multicolorlog
    client.color_log(255, 59, 59, "[ mlc.yaw ]\0")
    local arg_index = 1
    while select(arg_index, ...) ~= nil do
        client.color_log(217, 217, 217, " ", select(arg_index, ...), "\0")
        arg_index = arg_index + 1
    end
    client.color_log(217, 217, 217, " ") -- this is needed to end the line
end

lua_log("Set Velocity Triggers to 80 if you are using Auto/AWP")

local references = {
    fake_yaw_limit = ui.reference("AA", "Anti-aimbot angles", "Fake yaw limit"),
    aa_enabled = ui.reference("AA", "Anti-aimbot angles", "Enabled"),
    pitch = ui.reference("AA", "Anti-aimbot angles", "Pitch"),
    yaw = {ui.reference("AA", "Anti-aimbot angles", "Yaw")},
    body_yaw = {ui.reference("AA", "Anti-aimbot angles", "Body yaw")},
    yaw_base = ui.reference("AA", "Anti-aimbot angles", "Yaw base"),
    jitter = {ui.reference("AA", "Anti-aimbot angles", "Yaw jitter")},
    fake_limit = ui.reference("AA", "Anti-aimbot angles", "Fake yaw limit"),
    roll = {ui.reference("AA", "Anti-aimbot angles" , "Roll")},
}

local function setup()
    ui.set(references.yaw[1], "180")
    ui.set(references.body_yaw[2], 137)
    ui.set(references.yaw_base, "At targets")
    ui.set(references.body_yaw[1], "Static")
    ui.set(references.pitch, "Minimal")
    ui.set(references.jitter[2], 0)
    ui.set(references.fake_limit, 60)
end
setup()
local function on_setup_command(cmd)
    g_pOldAngles = vector(cmd.pitch, cmd.yaw, cmd.roll)
end
local slider_roll = ui.new_slider("AA", "Anti-aimbot angles", "Roll", -50, 50, 50, true, "Â°")


local sexy =
    ui.new_multiselect(
    "AA",
    "Anti-aimbot angles",
    "Roll State On:",
    "In Air",
    "On Ladders",
    "Low Stamina",
    "On Key",
    "< Speed Velocity"
)

local key3 = ui.new_hotkey("AA", "Anti-aimbot angles", "Force Rolling Angle on Key (Speed Decrease)")
local checkbox_hitchecker = ui.new_checkbox("AA", "Anti-aimbot angles", "Disable Roll when impacted", true)
local velocity_slider = ui.new_slider("AA", "Anti-aimbot angles", "Roll Velocity Trigger", 40, 250, 120, true, " ")
local stamina_slider = ui.new_slider("AA", "Anti-aimbot angles", "Stamina Recovery", 0, 80, 70, true, " ")
local in_air_roll = ui.new_slider("AA","Anti-aimbot angles","Customized Roll in air",  -50, 50, 50, true, " ")
local function velocity()
    local me = entity_get_local_player()
    local velocity_x, velocity_y = entity_get_prop(me, "m_vecVelocity")
    return math.sqrt(velocity_x ^ 2 + velocity_y ^ 2)
end
ui.set_visible(key3, false)
ui.set_visible(velocity_slider, false)
ui.set_visible(stamina_slider, false)
ui.set_visible(checkbox_hitchecker, false)
ui.set_visible(in_air_roll, false)
ui.set_visible(references.roll[1], false)

local function stamina()
    return (80 - entity_get_prop(entity_get_local_player(), "m_flStamina"))
end

ui.set_visible(checkbox_hitchecker, false)
local function on_hit()
    return (entity.get_prop(entity.get_local_player(), "m_flVelocityModifier"))
end

local function hit_bind()
    local hit_health = on_hit()
    if contains(ui.get(sexy), "< Speed Velocity") then
        ui.set_visible(velocity_slider, true)
        ui.set_visible(checkbox_hitchecker, true)
        if ui.get(checkbox_hitchecker) and hit_health <= 0.9 then
            return 0
        else if is_on_ladder == 1 then
            return  0
        else
            return ui.get(velocity_slider)
            end
        end
    end
    ui.set_visible(velocity_slider, false)
    ui.set_visible(checkbox_hitchecker, false)
    return 0
end

local function Ladder_status()
    local ladd_stat = 0
    if contains(ui.get(sexy), "On Ladders") then
        if is_on_ladder == 1 then
            ladd_stat = 1
        else
            ladd_stat = 0
        end
    end
    return ladd_stat
end


local function stamina_bind()
    if contains(ui.get(sexy), "Low Stamina") then
        ui.set_visible(stamina_slider, true)
        return ui.get(stamina_slider)
    else
        ui.set_visible(stamina_slider, false)
        return 0
    end
end
local function inair()
    return (bit_band(entity_get_prop(entity_get_local_player(), "m_fFlags"), 1) == 0)
end

local function air_status()
    local air_stat = 0
    if contains(ui.get(sexy), "In Air") then
        if inair() then
            air_stat = 1
        else
            air_stat = 0
        end
    end
    return air_stat
end
local function roll_bind()
    local roll_set = ui.get(slider_roll)
    if contains(ui.get(sexy), "In Air") then
        ui.set_visible(in_air_roll, true)
    else
        ui.set_visible(in_air_roll, false)
    end
    if air_status() == 1 then
        roll_set = ui.get(in_air_roll)
    else
        return ui.get(slider_roll)
    end
        return roll_set
end


local function hide_keys()
    local key100 = 1
    if contains(ui.get(sexy), "On Key") then
        ui.set_visible(key3, true)
    else
        ui.set_visible(key3, false)
        return key100
    end
end
client.set_event_callback(
    "setup_command",
    function(e)
        local local_player = entity.get_local_player()
        if entity.get_prop(local_player, "m_MoveType") == 9 then
            is_on_ladder = 1
        else
            is_on_ladder = 0
        end
    end
)
local is_rolling = false
local function on_run_command(cmd)
    hide_keys()
    local speed = velocity()
    local recovery = stamina()
    if air_status() == 0 and not ui.get(key3) and speed >= hit_bind() and recovery >= stamina_bind() and Ladder_status() == 0 then
        is_rolling = false
        return
    end
    is_rolling = true
    stamina_bind()
    hit_bind()
    local pUserCmd = g_pInput.vfptr.GetUserCmd(ffi.cast("uintptr_t", g_pInput), 0, cmd.command_number)

    pUserCmd.viewangles.roll = roll_bind()

end


client.set_event_callback("run_command", on_run_command)
client.set_event_callback("setup_command", on_setup_command)

client.set_event_callback("shutdown", function()
    ui.set_visible(references.roll[1], true)
end)




--fakeflick

local curtime = globals.curtime()

fakeFlick = false

client.set_event_callback("setup_command", function(cmd)
    fakeFlick = not fakeFlick
    if ui.get(fake_flick) then
    ui.set(fl_limit, 1)
    else
    ui.set(fl_limit, 15)
    end
    ui.set(byaw_val, (ui.get(fake_flick_invert) and -180 or 180))
    ui.set(byaw, "Static")
    if globals.curtime() > curtime + 0.1 and ui.get(fake_flick) then
        ui.set(yaw_val, (ui.get(fake_flick_invert) == 1 and -100 or 100))
        curtime = globals.curtime()
    else
        ui.set(yaw_val, 0)
    end
end)







--on_run_command
local function run_command()
	if ui.get(exploit_choice) == "Default" then
		ui.set_visible(yawbody, false)
	    ui.set_visible(yaw, false)
	    ui.set_visible(bodyyaw, false)
	    ui.set_visible(bodyyaw2, false)
	    ui.set_visible(edge, false)
	    ui.set_visible(jyaw, false)
	    ui.set_visible(jyawslide, false)
	    ui.set_visible(pitch, false)
	    ui.set_visible(yawbase, false)
	    ui.set_visible(freestanding, false)
	    ui.set_visible(freestanding2, false)
	    ui.set_visible(fyawlimit, false)
	    ui.set_visible(freestand_byaw, false)
        ui.set_visible(fake_flick, false)
        ui.set_visible(fake_flick_invert, false)   
        ui.set_visible(sexy, false) 
     


        
    elseif ui.get(exploit_choice) == "Roll aa" then
		ui.set_visible(yawbody, false)
	    ui.set_visible(yaw, false)
	    ui.set_visible(bodyyaw, false)
	    ui.set_visible(bodyyaw2, false)
	    ui.set_visible(edge, false)
	    ui.set_visible(jyaw, false)
	    ui.set_visible(jyawslide, false)
	    ui.set_visible(pitch, false)
	    ui.set_visible(yawbase, false)
	    ui.set_visible(freestanding, false)
	    ui.set_visible(freestanding2, false)
	    ui.set_visible(fyawlimit, false)
	    ui.set_visible(freestand_byaw, false)
        ui.set_visible(fake_flick, false)
        ui.set_visible(fake_flick_invert, false) 
        ui.set_visible(sexy, true)
        
       


    elseif ui.get(exploit_choice) == "Fake flick" then
		ui.set_visible(yawbody, false)
	    ui.set_visible(yaw, false)
	    ui.set_visible(bodyyaw, false)
	    ui.set_visible(bodyyaw2, false)
	    ui.set_visible(edge, false)
	    ui.set_visible(jyaw, false)
	    ui.set_visible(jyawslide, false)
	    ui.set_visible(pitch, false)
	    ui.set_visible(yawbase, false)
	    ui.set_visible(freestanding, false)
	    ui.set_visible(freestanding2, false)
	    ui.set_visible(fyawlimit, false)
	    ui.set_visible(freestand_byaw, false)
        ui.set_visible(fake_flick, true)
        ui.set_visible(fake_flick_invert, true)
        ui.set_visible(sexy, false)
    
    end
    

    
    
end



    


--callbacks
client.set_event_callback("run_command", run_command)
